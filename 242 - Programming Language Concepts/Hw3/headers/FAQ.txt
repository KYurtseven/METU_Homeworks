############################################################################################
############################### Frequently Asked Questions #################################
############################################################################################
###                                                                                      ###
### 1. In copy constructor of Region class, do deep copy in terms of subregions.         ###
###    However, do NOT deeply copy pokemons living in the unit cells. The copied         ###
###    regions should point to the same pokemon with the one that original region        ###
###    points.                                                                           ###
###                                                                                      ###
### 2. In copy constructor of Trainer class, do NOT deeply copy pokemons. Copied         ###
###    trainer should point to the same pokemon with the one that original Trainer       ###
###    points.                                                                           ###
###                                                                                      ###
### 3. In order to avoid double free operations for the pokemons which are shared        ###
###    by the different regions or trainers, you can do a check for whether the          ###
###    pointers are NULL or not.                                                         ###
###                                                                                      ###
### 4. You can also implement copy constructors of Region class and Trainer class        ###
###    totally in deep copying style instead of applying 1., 2. and 3. AS LONG AS        ###
###    you obey the general specifications mentioned in HW3.pdf and make it consistent   ###
###    with the specifications of other methods. Also, note that, copied trainers        ###
###    and copied regions will be tested only in terms of their attribute values. We     ###
###    are not going to use the copy of a Trainer/Region in the tests of other methods.  ###
###                                                                                      ###
### 5. For the pokemons which were caught by some trainer, you MUST remove them from     ###
###    the corresponding unit cells. Also, you MUST delete the corresponding subregions  ###
###    which become empty (do not have any unit cell including a pokemon) due to the     ###
###    caught pokemon.                                                                   ###
###                                                                                      ###
### 6. crop() method of Region class will be tested with the following inputs: If it     ###
###    is called as "A.crop(B)", then you can be sure that B exactly corresponds to      ###
###    one of the subregions of A.                                                       ###
###                                                                                      ###
### 7. patch() method of Trainer class will be tested with the following inputs: If it   ###
###    is called as "A.patch(B)", then you can be sure that B is a subset of A and it    ###
###    ensure BVH (since it belong to Region class already). However, it may not exactly ###
###    correspond to one of the subregions of A.                                         ###
###                                                                                      ###
############################################################################################
############################################################################################
